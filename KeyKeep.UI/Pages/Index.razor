@page "/"
@inject IDataProvider DataProvider
@inject IDialogService DialogService
@inject ISnackbar Toaster
@inject UserService UserService

<PageTitle>Übersicht</PageTitle>

<LoadingPage IsLoading="allPasswordInfos == null">

    <DefaultLayout>
        <Actions>
            <MudButton Color="Color.Success" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="OnClickAdd" EndIcon="@Icons.Material.Filled.AddCircle">Hinzufügen</MudButton>
        </Actions>
        <Content>
            @if (allPasswordInfos.Count != 0)
            {
                <MudDataGrid Items="@allPasswordInfos"
                             T="PasswordInfo"
                             Dense="true"
                             Striped="true"
                             Virtualize="true"
                             Hover="true">
                    <PropertyColumn Property="x => x.Title"/>
                    <PropertyColumn Property="x => x.Description"/>
                    <PropertyColumn Property="x => x.URL"/>
                    <PropertyColumn Property="x => x.UserName"/>
                    <PropertyColumn Property="x => x.UserPassword"/>
                    <TemplateColumn>
                        <CellTemplate>
                            <MudStack Row>
                                <MudFab Color="Color.Warning" StartIcon="@Icons.Material.Filled.Edit" OnClick="() => OnClickEdit(context.Item)"/>
                            <MudFab Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="() => OnClickDelete(context.Item)" />
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                </MudDataGrid>
            }
            else
            {
                <MudText Style="text-align: center" Typo="Typo.h3">Keine Daten..</MudText>
            }
        </Content>
    </DefaultLayout>
</LoadingPage>

@code
{
    private List<PasswordInfo> allPasswordInfos;

    private PasswordInfo selectedPasswordInfo;

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task Refresh()
    {
        allPasswordInfos = await DataProvider.GetPasswordsFromUser(UserService.CurrentUser.Id) ?? new List<PasswordInfo>();
    }

    private async Task OnClickAdd()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true
        };

        var dialogResult = await DialogService.ShowAsync<DialogAddPassword>("Passwort hinzufügen", options);
        var ka = dialogResult.Result;
    }

    private async Task OnClickEdit(PasswordInfo item)
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true
        };

        var dialogResult = await DialogService.ShowAsync<DialogAddPassword>("Passwort bearbeiten", options);
        var ka = dialogResult.Result;
    }

    private async Task OnClickDelete(PasswordInfo item)
    {
        
    }
}