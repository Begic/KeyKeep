@page "/"

@inject IDataProvider DataProvider
@inject IDialogService DialogService
@inject ISnackbar Toaster
@inject UserService UserService
@inject IJSRuntime JSRuntime

<PageTitle>Übersicht</PageTitle>

<DefaultLayout>
    <Actions>
        <MudTooltip Text="Hinzufügen">
            <MudButton Color="Color.Success" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@OnClickAdd" E ndIcon="@Icons.Material.Filled.AddCircle">Hinzufügen</MudButton>
        </MudTooltip>
    </Actions>
    <Content>
        @if (allPasswordInfos.Count != 0)
        {
            <MudDataGrid Items="@allPasswordInfos"
                         RowsPerPage="10"
                         Dense="true"
                         Striped="true"
                         Hover="true"
                         Virtualize="true">
                <Columns>
                    <PropertyColumn Title="Titel" Property="x => x.Title" />
                    <PropertyColumn Title="Beschreibung" Property="x => x.Description" />
                    <PropertyColumn Title="Link" Property="x => x.URL" />
                    <PropertyColumn Title="Benutzername" Property="x => x.UserName" />
                    <TemplateColumn Title="Passwort" Property="x => x.UserPassword">
                        <CellTemplate>
                            <MudTooltip Text="In Zwischenablage Kopieren">
                                <MudFab Class="mt-2" Size="Size.Small" Color="Color.Dark" StartIcon="@Icons.Material.Filled.CopyAll" OnClick="() => CopyPassword(context.Item)" />
                            </MudTooltip>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn>
                        <CellTemplate>
                            <MudStack Row>
                            <MudTooltip Text="Bearbeiten">
                                <MudFab Size="Size.Small" IconSize="Size.Small" Color="Color.Warning" StartIcon="@Icons.Material.Filled.Edit" OnClick="() => OnClickEdit(context.Item)" />
                            </MudTooltip>
                            <MudTooltip Text="Archivieren">
                                <MudFab Size="Size.Small" IconSize="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="() => OnClickArchiv(context.Item)" />
                            </MudTooltip>
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
        }
        else
        {
            <MudText Style="text-align: center" Typo="Typo.h5">Keine Daten..</MudText>
        }
    </Content>
</DefaultLayout>

@code
{
    private List<PasswordInfo> allPasswordInfos;

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task Refresh()
    {
        allPasswordInfos = (await DataProvider.GetPasswordsFromUser(UserService.CurrentUser.Id)).Where(x => !x.IsDeleted).ToList() ?? new List<PasswordInfo>();

        StateHasChanged();
    }

    private async Task OnClickAdd()
    {
        var dialogResult = await DialogService.ShowAsync<DialogAddPassword>("Passwort hinzufügen", new DialogParameters
        {
            { nameof(DialogAddPassword.PasswordId), null },
            { nameof(DialogAddPassword.IsDeleted), false }
        }, new DialogOptions
        {
            CloseOnEscapeKey = true
        });

        var ka = await dialogResult.Result;
        await Refresh();
    }

    private async Task OnClickEdit(PasswordInfo item)
    {
        var dialogResult = await DialogService.ShowAsync<DialogAddPassword>("Passwort bearbeiten", new DialogParameters
        {
            { nameof(DialogAddPassword.PasswordId), item.Id },
            { nameof(DialogAddPassword.IsDeleted), item.IsDeleted }
        }, new DialogOptions
        {
            CloseOnEscapeKey = true
        });

        var ka = await dialogResult.Result;
        await Refresh();
    }

    private async Task OnClickArchiv(PasswordInfo item)
    {
        if (item != null)
        {
            var result = await DialogService.ShowAsync<DialogDelete>("Achtung !", new DialogParameters(), new DialogOptions
                {
                    CloseOnEscapeKey = false,
                    DisableBackdropClick = true
                });


            if ((bool)(await result.Result).Data)
            {
                await DataProvider.ArchivePassword(item);

                await Refresh();

                Toaster.Add("Erfolgreich gelöscht", Severity.Success);
            }
        }
    }

    private async Task CopyPassword(PasswordInfo item)
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", item.UserPassword);

        Toaster.Add("Passwort in die Zwischenablage Kopiert", Severity.Info);
    }
}