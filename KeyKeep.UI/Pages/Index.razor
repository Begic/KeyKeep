@page "/"
@inject IDataProvider DataProvider
@inject IDialogService DialogService
@inject ISnackbar Toaster
@inject UserService UserService

<PageTitle>Übersicht</PageTitle>

<DefaultLayout>
    <Actions>
        <MudButton Color="Color.Success" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@OnClickAdd" EndIcon="@Icons.Material.Filled.AddCircle">Hinzufügen</MudButton>
    </Actions>
    <Content>
        @if (allPasswordInfos.Count != 0)
        {
            <MudDataGrid Items="@allPasswordInfos"
                         Dense="true"
                         Striped="true"
                         Hover="true"
                         ColumnResizeMode="ResizeMode.Column">
                <Columns>
                    <PropertyColumn Title="Titel" Property="x => x.Title" />
                    <PropertyColumn Title="Beschreibung" Property="x => x.Description" />
                    <PropertyColumn Title="Link" Property="x => x.URL" />
                    <PropertyColumn Title="Benutzername" Property="x => x.UserName" />
                    <PropertyColumn Title="Passwort" Property="x => x.UserPassword" />
                    <TemplateColumn>
                        <CellTemplate>
                            <MudStack Row>
                            <MudFab Size="Size.Small" IconSize="Size.Small" Color="Color.Warning" StartIcon="@Icons.Material.Filled.Edit" OnClick="() => OnClickEdit(context.Item)" />
                            <MudFab Size="Size.Small" IconSize="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="() => OnClickDelete(context.Item)" />
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
        }
        else
        {
            <MudText Style="text-align: center" Typo="Typo.h3">Keine Daten..</MudText>
        }
    </Content>
</DefaultLayout>

@code
{
    private List<PasswordInfo> allPasswordInfos;

    private PasswordInfo selectedPasswordInfo;

    protected override async Task OnInitializedAsync()
    {
        await Refresh();

        StateHasChanged();
    }

    private async Task Refresh()
    {
        allPasswordInfos = await DataProvider.GetPasswordsFromUser(UserService.CurrentUser.Id) ?? new List<PasswordInfo>();
    }

    private async Task OnClickAdd()
    {
        var options = new DialogOptions
            {
                Position = DialogPosition.Center,
                DisableBackdropClick = true,
                MaxWidth = MaxWidth.Small,
            };

        var dialogResult = await DialogService.ShowAsync<DialogAddPassword>("Passwort hinzufügen", options);
        
        var ka = await dialogResult.Result;

        await Refresh();
    }

    private async Task OnClickEdit(PasswordInfo item)
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true
            };

        var dialogResult = await DialogService.ShowAsync<DialogAddPassword>("Passwort bearbeiten", new DialogParameters
        {
            {nameof(DialogAddPassword.PasswordId), item.Id},
        }, options);
        var ka = dialogResult.Result;

        await Refresh();
    }

    private async Task OnClickDelete(PasswordInfo item)
    {
        if (item != null)
        {
            await DataProvider.DeletePassword(item);

            Toaster.Add("Erfolgreich gelöscht", Severity.Success);
        }
    }
}