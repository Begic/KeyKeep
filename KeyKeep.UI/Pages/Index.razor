@page "/"
@using System.Security.Cryptography

@inject IDataProvider DataProvider
@inject IDialogService DialogService
@inject ISnackbar Toaster
@inject UserService UserService

<PageTitle>Übersicht</PageTitle>

<DefaultLayout>
    <Actions>
        <MudTooltip Text="Hinzufügen">
            <MudButton Color="Color.Success" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@OnClickAdd" EndIcon="@Icons.Material.Filled.AddCircle">Hinzufügen</MudButton>
        </MudTooltip>
    </Actions>
    <Content>
        @if (allPasswordInfos.Count != 0)
        {
            <MudDataGrid Items="@allPasswordInfos"
                     Dense="true"
                     Striped="true"
                     Hover="true"
                     Virtualize="true">
                <Columns>
                    <PropertyColumn Title="Titel" Property="x => x.Title" />
                    <PropertyColumn Title="Beschreibung" Property="x => x.Description" />
                    <PropertyColumn Title="Link" Property="x => x.URL" />
                    <PropertyColumn Title="Benutzername" Property="x => x.UserName" />
                    <PropertyColumn Title="Passwort" Property="x => x.UserPassword" />
                    <TemplateColumn>
                        <CellTemplate>
                            <MudStack Row>
                            <MudTooltip Text="Bearbeiten">
                                <MudFab Size="Size.Small" IconSize="Size.Small" Color="Color.Warning" StartIcon="@Icons.Material.Filled.Edit" OnClick="() => OnClickEdit(context.Item)" />
                            </MudTooltip>
                            <MudTooltip Text="Archivieren">
                                <MudFab Size="Size.Small" IconSize="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="() => OnClickArchiv(context.Item)" />
                            </MudTooltip>
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
        }
        else
        {
            <MudText Style="text-align: center" Typo="Typo.h3">Keine Daten..</MudText>
        }
    </Content>
</DefaultLayout>

@code
{
    private List<PasswordInfo> allPasswordInfos;

    protected override async Task OnInitializedAsync()
    {
        var withsamebyte = "Hallo";
        
        var withdifferent = "Hallo";

        var ka = "Test";
        var ka1 = "Test";

        using (AesCryptoServiceProvider aes = new AesCryptoServiceProvider())
        {
            aes.KeySize = 256;

            byte[] key = aes.Key;

            byte[] encrypted = EditData.Encrypt(withsamebyte, key);
            string decrypted = EditData.Decrypt(encrypted, key);

            Console.WriteLine(decrypted);
        }

      
        byte[] encrypted2 = EditData.Encrypt(withdifferent, new byte[32]);
        string testwithdifferent = EditData.Decrypt(encrypted2, new byte[32]);
      
        byte[] encrypted3 = EditData.Encrypt(ka, new byte[32]);
        string testwithdifferent3 = EditData.Decrypt(encrypted3, new byte[32]);

        byte[] encrypted4 = EditData.Encrypt(ka1, new byte[32]);
        string testwithdifferent4 = EditData.Decrypt(encrypted4, new byte[32]);

        await Refresh();

        StateHasChanged();
    }

    private async Task Refresh()
    {
        allPasswordInfos = (await DataProvider.GetPasswordsFromUser(UserService.CurrentUser.Id)).Where(x => !x.IsDeleted).ToList() ?? new List<PasswordInfo>();
    }

    private async Task OnClickAdd()
    {
        var dialogResult = await DialogService.ShowAsync<DialogAddPassword>("Passwort hinzufügen", new DialogParameters
        {
            {nameof(DialogAddPassword.PasswordId), null},
            {nameof(DialogAddPassword.IsDeleted), false},
        }, new DialogOptions
        {
            CloseOnEscapeKey = true
        });

        var ka = await dialogResult.Result;
        await Refresh();
    }

    private async Task OnClickEdit(PasswordInfo item)
    {
        var dialogResult = await DialogService.ShowAsync<DialogAddPassword>("Passwort bearbeiten", new DialogParameters
        {
            {nameof(DialogAddPassword.PasswordId), item.Id},
            {nameof(DialogAddPassword.IsDeleted), item.IsDeleted},
        }, new DialogOptions
        {
            CloseOnEscapeKey = true
        });

        var ka = dialogResult.Result;
        await Refresh();
    }

    private async Task OnClickArchiv(PasswordInfo item)
    {
        if (item != null)
        {
            var result = await DialogService.ShowAsync<DialogDelete>("Achtung !", new DialogParameters(), new DialogOptions
                {
                    CloseOnEscapeKey = true
                });


            if ((bool)(await result.Result).Data)
            {
                await DataProvider.ArchivePassword(item);

                await Refresh();

                Toaster.Add("Erfolgreich gelöscht", MudBlazor.Severity.Success);
            }
        }
    }
}