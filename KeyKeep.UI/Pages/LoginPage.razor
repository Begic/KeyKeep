@inject ILoginProvider LoginProvider
@inject UserService UserService
@inject ISnackbar Toaster
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageTitle>Login</PageTitle>

<MudPaper Style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); min-width: 600px">
    <DefaultLayout>
        <Content>
            <MudGrid>
                <MudItem xs="3" />
                <MudItem xs="6">
                    <MudTextField Label="E-Mail" @bind-Value="@Email" />
                    <MudTextField Label="Passwort" @bind-Value="@Password" />
                    <Divider/>
                    <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Success" OnClick="OnClickTryLogin" EndIcon="@Icons.Material.Filled.Login">Anmelden</MudButton>
                    <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Primary" OnClick="OnClickRegister" EndIcon="@Icons.Material.Filled.PersonAdd">Registrieren</MudButton>
                </MudItem>
                <MudItem xs="3" />
            </MudGrid>
        </Content>
    </DefaultLayout>
</MudPaper>



@code
{
    [Parameter]
    public bool CanLogin { get; set; }

    [Parameter]
    public EventCallback<bool> CanLoginChanged { get; set; }

    public string Password { get; set; }
    public string Email { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task Refresh()
    {
        Password = string.Empty;
        Email = string.Empty;
    }

    private async Task OnClickTryLogin()
    {
        var loginUser = await LoginProvider.CheckUserForLogin(Email, Password);

        if (loginUser != null)
        {
            CanLogin = true;
            UserService.CurrentUser = loginUser;
            Toaster.Add("Login erfolgreich", Severity.Success);
        }
        else
        {
            CanLogin = false;
            UserService.CurrentUser = null;
            Toaster.Add("Login fehlerhaft", Severity.Error);
        }

        await CanLoginChanged.InvokeAsync(CanLogin);
    }

    private async Task OnClickRegister()
    {
        await DialogService.ShowAsync<DialogRegister>("Registrieren", new DialogOptions
            {
                Position = DialogPosition.Center,
                DisableBackdropClick = true,
                CloseButton = true,
                MaxWidth = MaxWidth.Medium,
            });

        await Refresh();
    }
}