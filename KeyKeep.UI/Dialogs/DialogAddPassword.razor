@inject UserService UserService
@inject IDataProvider DataProvider
@inject ISnackbar Toaster

<EditForm Model="@PasswordInfoToEdit" OnValidSubmit="@Save">
    <MudDialog>
        <DialogContent>
            <MudGrid>
                <MudItem md="12">
                    <MudTextField @bind-Value="@PasswordInfoToEdit.Title" Label="Titel" Variant="Variant.Outlined" />
                </MudItem>
                <MudItem md="12">
                    <MudTextField @bind-Value="@PasswordInfoToEdit.Description" Label="Beschreibung" Variant="Variant.Outlined" />
                </MudItem>
                <MudItem md="12">
                    <MudTextField @bind-Value="@PasswordInfoToEdit.URL" Label="Link" Variant="Variant.Outlined" />
                </MudItem>
                <MudItem md="12">
                    <MudTextField @bind-Value="@PasswordInfoToEdit.UserName" Label="Benutzername" Variant="Variant.Outlined" />
                </MudItem>

                <MudItem md="6">
                    <MudSwitch T="bool" @bind-Checked="@ShowAutoGeneration" Label="Passwort generieren"></MudSwitch>
                </MudItem>

                @if (ShowAutoGeneration)
                {
                    <MudItem md="6">
                        <MudStack Row>
                        <MudItem md="6">
                            <MudNumericField @bind-Value="lenghtOfPassword" Label="Länge Passwort" Variant="Variant.Text" Min="4" Max="100" />
                        </MudItem>
                        <MudItem md="6">
                            <MudFab Class="mt-2" Size="Size.Small" Color="Color.Info" StartIcon="@Icons.Material.Filled.VerifiedUser" OnClick="@GeneratePasswort" />
                        </MudItem>
                    </MudStack>
                </MudItem>
                }

                <MudItem md="11">
                    <MudTextField @bind-Value="@PasswordInfoToEdit.UserPassword" Label="Passwort" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="OnClickShowPassword" AdornmentAriaLabel="Zeige Passwort" />
                </MudItem>
                
                <MudItem md="1">
                    <MudFab Class="mt-2" Size="Size.Small" Color="Color.Dark" StartIcon="@Icons.Material.Filled.CopyAll" OnClick="@CopyPassword" />
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>

            <MudButton Color="Color.Error" ButtonType="ButtonType.Button" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Cancel" OnClick="@OnClickCancel">Abbrechen</MudButton>
            <MudButton Color="Color.Success" ButtonType="ButtonType.Submit" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Save">Speichern</MudButton>

        </DialogActions>
    </MudDialog>
</EditForm>

@code
{
    [Parameter]
    public int? PasswordId { get; set; }

    [CascadingParameter]
    public MudDialogInstance? MudDialog { get; set; }

    public PasswordInfo PasswordInfoToEdit { get; set; }

    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    private bool isShow;

    public bool ShowAutoGeneration
    {
        get => showAutoGeneration;
        set
        {
            showAutoGeneration = value;
            PasswordInfoToEdit.UserPassword = string.Empty;
            lenghtOfPassword = 4;
        }
    }

    private int lenghtOfPassword;
    private bool showAutoGeneration;

    protected override async Task OnInitializedAsync()
    {
        PasswordInfoToEdit = await DataProvider.GetPasswordInfo(PasswordId) ?? new PasswordInfo();
    }

    private async Task Save()
    {
        await DataProvider.EditPassword(PasswordInfoToEdit);
        MudDialog.Close();
        Toaster.Add("Erfolgreich gespeichert", MudBlazor.Severity.Success);
    }

    private async Task OnClickCancel()
    {
        MudDialog.Cancel();

        Toaster.Add("Abgebrochen", MudBlazor.Severity.Error);
    }

    private void OnClickShowPassword()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async Task GeneratePasswort()
    {
        var chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+-=[]{};:,.<>?";
        var random = new Random();
        PasswordInfoToEdit.UserPassword = new string(Enumerable.Repeat(chars, lenghtOfPassword).Select(s => s[random.Next(s.Length)]).ToArray());
    }

    private async Task CopyPassword()
    {


        Toaster.Add("Kopiert", MudBlazor.Severity.Info);
    }
}